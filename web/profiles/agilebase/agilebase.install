<?php
/**
 * @file
 * Install, update and uninstall functions for the minimal installation profile.
 */

/**
 * Implements hook_install().
 *
 * Performs actions to set up the site for this profile.
 *
 * @see system_install()
 */
function agilebase_install() {

  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'allowed_html' => "<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <img> <p> <br> <table> <tr> <td> <thead> <tbody> <th> <u> <s> <h2> <h3> <h4> <h5>",
          'filter_html_help' => TRUE,
          'filter_html_nofollow' => FALSE,
        ),
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // Media Filter.
      'media_filter' => array(
        'weight' => 2,
        'status' => 1,
        'settings' => array(),
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Media Filter.
      'media_filter' => array(
        'weight' => 2,
        'status' => 1,
        'settings' => array(),
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Insert default pre-defined node types into the database.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Standard page'),
      'base' => 'node_content',
      'description' => st("Use <em>standard pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Standard page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Standard page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Set bartik as the default. Soon the default will be an omega based one
  // once the user sets it up.
  $default_theme = variable_get('theme_default', 'bartik');
  // Enable some standard blocks.
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache'
  ));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Allow visitor account creation, but with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    $filtered_html_permission
  ));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    $filtered_html_permission
  ));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 3;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a role for content editor.
  $content_role = new stdClass();
  $content_role->name = 'content editor';
  $content_role->weight = 2;
  user_role_save($content_role);
  user_role_grant_permissions($content_role->rid, array(
    'access administration pages',
    'access content',
    'access content overview',
    'access contextual links',
    'access in-place editing',
    'access media browser',
    'access navbar',
    'bypass honeypot protection',
    'change own username',
    'create files',
    'create page content',
    'delete any audio files',
    'delete any document files',
    'delete any image files',
    'delete any page content',
    'delete any video files',
    'delete own audio files',
    'delete own document files',
    'delete own image files',
    'delete own page content',
    'delete own video files',
    'download any audio files',
    'download any document files',
    'download any image files',
    'download any video files',
    'download own audio files',
    'download own document files',
    'download own image files',
    'download own video files',
    'edit any audio files',
    'edit any document files',
    'edit any image files',
    'edit any page content',
    'edit any video files',
    'edit any webform content',
    'edit own audio files',
    'edit own document files',
    'edit own image files',
    'edit own page content',
    'edit own video files',
    'revert revisions',
    'show more format tips link',
    'use text format filtered_html',
    'view files',
    'view own files',
    'view own private files',
    'view own unpublished content',
    'view private files',
    'view revisions',
    'view the administration theme',
  ));

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the adminimal theme and set it as the default for administration.
  theme_enable(array('adminimal', 'ac_adminimal'));
  variable_set('admin_theme', 'ac_adminimal');

  // Change the name of the default environment indicator to development.
  module_enable(array('environment_indicator'));
  db_insert('environment_indicator_environment')
    ->fields(array(
      'machine' => 'local_dev',
      'name' => 'Local dev',
      'regexurl' => 'l\..*',
      'settings' => 'a:5:{s:5:"color";s:7:"#aa3332";s:10:"text_color";s:7:"#ffffff";s:6:"weight";s:1:"0";s:8:"position";s:3:"top";s:5:"fixed";i:0;}',
    ))
    ->execute();

  // Set the jquery_update version to something reasonable.
  variable_set('jquery_update_jquery_version', '1.8');

  // Set a default sitewide context.
  module_enable(array('context'));
  db_insert('context')
    ->fields(
      array(
        'name' => 'global_blocks',
        'description' => 'Blocks which are displayed across the whole site',
        'tag' => 'Global',
        'conditions' => 'a:1:{s:8:"sitewide";a:1:{s:6:"values";a:1:{i:1;i:1;}}}',
        'reactions' => 'a:1:{s:5:"block";a:1:{s:6:"blocks";a:1:{s:21:"masquerade-masquerade";a:4:{s:6:"module";s:10:"masquerade";s:5:"delta";s:10:"masquerade";s:6:"region";s:6:"footer";s:6:"weight";s:3:"-10";}}}}',
        'condition_mode' => '0',
      )
    )
    ->execute();

  module_enable(array('ckeditor'));

  $settings = array(
    'ss' => '2',
    'toolbar' => '[ [\'Format\',\'Bold\',\'Italic\',\'-\',\'NumberedList\',\'BulletedList\',\'-\',\'PasteFromWord\',\'linkit\',\'Unlink\',\'MediaEmbed\',\'Media\'] ]',
    'expand' => 't',
    'default' => 't',
    'show_toggle' => 't',
    'uicolor' => 'default',
    'uicolor_user' => 'default',
    'width' => '100%',
    'lang' => 'en',
    'auto_lang' => 't',
    'language_direction' => 'default',
    'allowed_content' => 'f',
    'extraAllowedContent' => '',
    'enter_mode' => 'p',
    'shift_enter_mode' => 'br',
    'font_format' => 'p;h2;h3;h4',
    'custom_formatting' => 'f',
    'formatting' => array(
      'custom_formatting_options' => array(
        'indent' => 'indent',
        'breakBeforeOpen' => 'breakBeforeOpen',
        'breakAfterOpen' => 'breakAfterOpen',
        'breakAfterClose' => 'breakAfterClose',
        'breakBeforeClose' => 0,
        'pre_indent' => 0,
      ),
    ),
    'css_mode' => 'theme',
    'css_path' => '',
    'css_style' => 'theme',
    'styles_path' => '',
    'filebrowser' => 'none',
    'filebrowser_image' => '',
    'filebrowser_flash' => '',
    'UserFilesPath' => '%b%f/',
    'UserFilesAbsolutePath' => '%d%b%f/',
    'forcePasteAsPlainText' => 'f',
    'html_entities' => 'f',
    'scayt_autoStartup' => 'f',
    'theme_config_js' => 't',
    'js_conf' => '',
    'loadPlugins' => array(
      'drupalbreaks' => array(
        'name' => 'drupalbreaks',
        'desc' => 'Plugin for inserting Drupal teaser and page breaks.',
        'path' => '%plugin_dir%drupalbreaks/',
        'buttons' => array(
          'DrupalBreak' => array(
            'label' => 'DrupalBreak',
            'icon' => 'images/drupalbreak.png',
          ),
        ),
        'default' => 't',
      ),
      'linkit' => array(
        'name' => 'linkit',
        'desc' => 'Support for Linkit module',
        'path' => '%base_path%sites/all/modules/contrib/linkit/editors/ckeditor/',
        'buttons' => array(
          'linkit' => array(
            'label' => 'Linkit',
            'icon' => 'icons/linkit.png',
          ),
        ),
      ),
      'media' => array(
        'name' => 'media',
        'desc' => 'Plugin for inserting images from Drupal media module',
        'path' => '%plugin_dir%media/',
        'buttons' => array(
          'Media' => array(
            'label' => 'Media',
            'icon' => 'images/icon.gif',
          ),
        ),
        'default' => 'f',
      ),
      'mediaBrowser' => array(
        'name' => 'mediaBrowser',
        'desc' => 'Media Browser for File Upload/Browsing',
        'path' => '%base_path%sites/all/modules/contrib/ckeditor_media/plugins/mediaBrowser/',
        'buttons' => FALSE,
      ),
      'mediaembed' => array(
        'name' => 'mediaembed',
        'desc' => 'Plugin for inserting Drupal embeded media',
        'path' => '%plugin_dir%mediaembed/',
        'buttons' => array(
          'MediaEmbed' => array(
            'label' => 'MediaEmbed',
            'icon' => 'images/icon.png',
          ),
        ),
        'default' => 'f',
      ),
    ),
  );

  // Add the full settings to the db.
  db_update('ckeditor_settings')
    ->fields(
      array(
        'name' => 'Full',
        'settings' => serialize($settings),
      )
    )
    ->condition('ckeditor_settings.name', 'Full')
    ->execute();

  // Some changes for the html filtered one.
  $settings['toolbar'] = '[ [\'Format\',\'Bold\',\'Italic\',\'-\',\'NumberedList\',\'BulletedList\',\'-\',\'PasteFromWord\',\'linkit\',\'Unlink\',\'Image\'] ]';
  $settings['extraAllowedContent'] = 'object[width,height];param[name,value];embed[*];img[*];';
  $settings['allowed_content'] = 't';

  // Now add the advanced toolbar settings.
  db_update('ckeditor_settings')
    ->fields(
      array(
        'name' => 'Advanced',
        'settings' => serialize($settings),
      )
    )
    ->condition('ckeditor_settings.name', 'Advanced')
    ->execute();

  // Add a linkit profile.
  $data = array(
    'text_formats' => array(
      'filtered_html' => 'filtered_html',
      'full_html' => 'full_html',
      'plain_text' => 0,
    ),
    'search_plugins' => array(
      'entity:taxonomy_term' => array(
        'enabled' => 0,
        'weight' => '-10',
      ),
      'entity:node' => array('enabled' => 1, 'weight' => '-10',),
      'entity:file' => array('enabled' => 0, 'weight' => '-10',),
      'entity:user' => array('enabled' => 0, 'weight' => '-10',),
    ),
    'entity:node' => array(
      'result_description' => '',
      'include_unpublished' => 1,
    ),
    'entity:file' => array(
      'result_description' => '',
      'bundles' => array(
        'image' => 0,
        'video' => 0,
        'audio' => 0,
        'document' => 0,
      ),
      'group_by_bundle' => 0,
      'show_scheme' => 0,
      'group_by_scheme' => 0,
      'image_extra_info' => array(
        'thumbnail' => 'thumbnail',
        'dimensions' => 'dimensions',
      ),
    ),
    'entity:taxonomy_term' => array('result_description' => '',),
    'entity:user' => array('result_description' => '',),
    'insert_plugin' => array('url_method' => '2',),
    'attribute_plugins' => array(
      'accesskey' => array(
        'enabled' => 0,
        'weight' => '-10',
      ),
      'target' => array('enabled' => 0, 'weight' => '-10',),
      'class' => array('enabled' => 0, 'weight' => '-10',),
      'rel' => array('enabled' => 0, 'weight' => '-10',),
      'id' => array('enabled' => 0, 'weight' => '-10',),
      'title' => array('enabled' => 0, 'weight' => '-10',),
    ),
    'autocomplete' => array(
      'charLimit' => '3',
      'wait' => '350',
      'remoteTimeout' => '10000',
    ),
  );

  // Add the profile.
  db_insert('linkit_profiles')
    ->fields(
      array(
        'name' => 'link_to_nodes',
        'admin_title' => 'Link to nodes',
        'admin_description' => 'A profile that allows linking to nodes, including unpublished nodes.',
        'profile_type' => 1,
        'data' => serialize($data),
      )
    )
    ->execute();
}
